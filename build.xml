<project name="ProgramTest" basedir="." default="run-all">

	<!-- build.properties must be in basedir --> 
	<property file="build.properties"/>

	<path id="classpath">
        <fileset dir="${libDirectory}" includes="**/*.jar"/>
    </path>

    <path id="application" location="${distDirectory}/${appName}.jar"/>
	
	<!-- The clean target deletes the bin and dist directories (permitting 
 	you to start from scratch. --> 

	<target name="clean">
	  <delete dir="${binDirectory}"/>
	  <delete dir="${distDirectory}"/>
	</target>


	<!-- The compile-all target creates the bin directory, copies any 
	.properties files from the src directory into the bin directory, 
	and compiles the code in the src directory while simultaneously
	placing the generated .class files into he bin directory. -->

	<target name="compile-all" depends="clean">
	  <mkdir dir="${binDirectory}"/>
	  <copy todir="${binDirectory}">
	    <fileset dir="${srcDirectory}" includes="**/*.properties"/>
	  </copy>
	  <javac srcdir="${srcDirectory}" classpathref="classpath"
		 destdir="${binDirectory}"
		 includeAntRuntime="false"
		 fork="true"
	  >
	  <exclude name="**/src/**" />
	  </javac>	
	</target>



	<!-- An incremental compile -->

	<target name="compile">
	  <mkdir dir="${binDirectory}"/>
	  <copy todir="${binDirectory}">
	    <fileset dir="${srcDirectory}" includes="**/*.properties"/>
	  </copy>
	  <javac srcdir="${srcDirectory}" classpathref="classpath"
		 destdir="${binDirectory}"
		 includeAntRuntime="false"
		 fork="true"
	  >
	  <exclude name="**/src/**" />
	  </javac>
	</target>



	<!-- The build-all target creates the dist directory and jars 
	the files in the bin directory, placing the resulting .jar file 
	in the dist directory. -->

	<target name="build-all" depends="compile-all"> 
	  <mkdir dir="${distDirectory}"/>
	  <jar destfile="${distDirectory}/${appName}.jar"
	       basedir="${binDirectory}">
	       <manifest>
		 <attribute name="Main-Class"
		   value="${mainClass}"/>
	       </manifest>
	  </jar>
	</target>



	<!-- An incremental build -->

	<target name="build" depends="compile"> 
	  <mkdir dir="${distDirectory}"/>
	  <jar destfile="${distDirectory}/${appName}.jar"
	       basedir="${binDirectory}">
	       <manifest>
		 <attribute name="Main-Class"
		   value="${mainClass}"/>
	       </manifest>
	  </jar>
	</target>



	<!-- Just jars the .class files with no recompile.-->

	<target name="build-ind"> 
	  <mkdir dir="${distDirectory}"/>
	  <jar destfile="${distDirectory}/${appName}.jar"
	       basedir="${binDirectory}">
	       <manifest>
		 <attribute name="Main-Class"
		   value="${mainClass}"/>
	       </manifest>
	  </jar>
	</target>



	<!-- The run-all target runs the .jar file created in the 
	previous target, utilizing the class as the executable class. -->

	<target name="run-all" depends="build-all">
	  <java fork="true" classname="${mainClass}">
	    <classpath>
            <path refid="classpath"/>
            <path refid="application"/>
            <path location="${distDirectory}/${appName}.jar"/>
        </classpath>
	  </java>
	</target>



	<!-- Runs the program after building. -->
	<target name="run" depends="build">
	  <java fork="true" classname="${mainClass}">
	    <classpath>
            <path refid="classpath"/>
            <path refid="application"/>
            <path location="${distDirectory}/${appName}.jar"/>
        </classpath>
	  </java>
	</target>



	<!-- Runs the program without building. -->

	<target name="run-ind">
	  <java fork="true" classname="${mainClass}">
	    <classpath>
            <path refid="classpath"/>
            <path refid="application"/>
            <path location="${distDirectory}/${appName}.jar"/>
        </classpath>
	  </java>
	</target>



	<!-- The doc target has no dependencies, creates the javadocs 
	and places them in the doc directory. -->

	<target name="doc">
	<javadoc sourcepath="${srcDirectory}"
		 destdir="${docDirectory}"
		 author="true"
		 version="true">
	</javadoc>
	</target>


	<!-- Runs all JunitTests -->
	<target name="test" depends="build-all">
        <junit printsummary="yes" showoutput="yes">
            <classpath>
                <path refid="classpath"/>
                <path refid="application"/>
            </classpath>
            
            <batchtest fork="yes">
                <fileset dir="${srcDirectory}" includes="TestSuite.java"/>
            </batchtest>

            <formatter type="plain" usefile="false" />
        </junit>
    </target>

</project>